//! World structures.



use crate::dynamics::{
    CCDSolver, ImpulseJointSet, IntegrationParameters, IslandManager, MultibodyJointSet,
    RigidBodySet
};
use crate::geometry::{ColliderSet, BroadPhase, NarrowPhase};
use crate::math::{Real, Vector};
use crate::pipeline::{EventHandler, PhysicsHooks, PhysicsPipeline, QueryPipeline};
use crate::prelude::DefaultBroadPhase;



/// A complete physics simulation world, encapsulating all Rapier systems.
pub struct World<BP>
where
    BP: BroadPhase
{
    /// Gravity vector applied to all dynamic bodies.
    pub gravity: Vector<Real>,
    /// Parameters for a time-step of the physics engine.
    pub integration_parameters: IntegrationParameters,
    /// Structure responsible for maintaining the set of active rigid-bodies, and putting non-moving
    /// rigid-bodies to sleep to save computation times.
    pub island_manager: IslandManager,
    /// Broad-phase algorithms supported by Rapier.
    pub broad_phase: BP,
    /// The narrow-phase responsible for computing precise contact information between colliders.
    pub narrow_phase: NarrowPhase,
    /// A set of rigid bodies that can be handled by a physics pipeline.
    pub rigid_body_set: RigidBodySet,
    /// A set of colliders that can be handled by a physics `World`.
    pub collider_set: ColliderSet,
    /// A set of impulse_joints that can be handled by a physics `World`.
    pub impulse_joint_set: ImpulseJointSet,
    /// A set of rigid bodies that can be handled by a physics pipeline.
    pub multibody_joint_set: MultibodyJointSet,
    /// Solver responsible for performing motion-clamping on fast-moving bodies.
    pub ccd_solver: CCDSolver,
    /// A pipeline for performing queries on all the colliders of a scene.
    pub query_pipeline: Option<QueryPipeline>,
    /// The physics pipeline, responsible for stepping the whole physics simulation.
    pub physics_pipeline: PhysicsPipeline
}



impl<BP> World<BP>
where
    BP: BroadPhase
{

    /// Executes one timestep of the physics simulation.
    ///
    /// # Arguments:
    /// * `physics_hooks` - User-defined functions called by the physics engines during one timestep
    ///                     in order to customize its behavior.
    /// * `event_handler` - Responsible for handling events generated by the physics engine.
    pub fn step(&mut self, physics_hooks: &impl PhysicsHooks, event_handler: &impl EventHandler) {
        self.physics_pipeline.step(
            &self.gravity,
            &self.integration_parameters,
            &mut self.island_manager,
            &mut self.broad_phase,
            &mut self.narrow_phase,
            &mut self.rigid_body_set,
            &mut self.collider_set,
            &mut self.impulse_joint_set,
            &mut self.multibody_joint_set,
            &mut self.ccd_solver,
            self.query_pipeline.as_mut(),
            physics_hooks,
            event_handler
        );
    }

}



/// The default world type using the default broad-phase, no hooks, and no events.
pub type DefaultWorld = World<DefaultBroadPhase>;



impl DefaultWorld {

    /// Creates a new default-world with the specified gravity.
    ///
    /// # Arguments:
    /// * `gravity` - A vector representing the gravity direction and magnitude.
    pub fn new(gravity: Vector<Real>) -> Self {
        Self {
            gravity,
            integration_parameters: IntegrationParameters::default(),
            island_manager: IslandManager::new(),
            broad_phase: DefaultBroadPhase::new(),
            narrow_phase: NarrowPhase::new(),
            rigid_body_set: RigidBodySet::new(),
            collider_set: ColliderSet::new(),
            impulse_joint_set: ImpulseJointSet::new(),
            multibody_joint_set: MultibodyJointSet::new(),
            ccd_solver: CCDSolver::new(),
            query_pipeline: None,
            physics_pipeline: PhysicsPipeline::new()
        }
    }

}
